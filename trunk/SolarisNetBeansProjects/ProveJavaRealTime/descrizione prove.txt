Prova 1:

Creo un thread real time, gli faccio fare un'esecuzione di 1 secondo,
poi lo faccio terminare.

Prova 2:
visto che la prova 1 non è andata tanto bene, provo a fare un po' di prove
con i Relative e Absolute time:
provo a costruire un relative time con 10000 ms ( 10 sec) e a stamparlo, per
vedere cosa esce fuori

provo a creare due Absolute Time, distanziati di 5 secondi l'uno dall'altro e
a vedere cosa viene come differenza

Stampo i valori numerici delle priorità dello scheduler, almeno mirendo conto
dei numeri con cui lavora.

Prova 3:

Creo due trhread con lo stesso tempo di esecuzione e lo stesso istante di
release, solo uno con priorità inferiore all'altro; faccio stamapre ad entrambi
quando entrano in esecuzione e quendo la terminano.

Prova 4:

Creo un thread periodico, gli faccio fare 10 iterazioni e stampo i tempi di release
e di termine dell'esecuzione.

Prova 5:

Simile alla prova quattro, ma il thread una volta ogni due sfora la deadline,
cli associo un deadlineMissHandler che conta gli sforamenti di deadline e stampa
tutto sulla memoria.

NOTA: anche allungando molto il tempo di esecuzione il sistema esegue comunque
tutti i job in ordine, anche a costo di schedulare un thread dopo l'istante di
release del successivo: politica di base è quindi AsSoonAsPossible.

NOTA2: se viene asociato un handler ad un thread realtime periodico,
quando questo viola la deadline il thread viene deschedulato(!) e vine chiamato
il metodo handleAsyncEvent dell'handler, se si vuole che il processo torni in eseceuzione
l'andler dee chiamare a mano il metodo schedulePeriodic passando come parametro il thread
da sorvegliare.

Prova6:

Altro esercizio sullo sforamento di deadline: qui ho un thread che , nonostante abbia
un periodo di 1000, esegue per 2500. voglio vedere di quanti (e quali ) sforamenti
di deadline il sistema mi da conto.

Vengono sollevati due eventi di deadline miss: uno dopo 100 e uno dopo 2000.
E' la cosa più corretta. Le esecuzioni vengono, al solito accodate.

Prova 7:

Proviamo il protocollo priority inheritance:faccio partire un thread a priorità inferiore,
e gli faccio usare una risorsa ( modellata come esecuzione di un metoto sinchronize di una
classe) per un certo tempo; mentre il processo a bassa priorità uas la risorsa ne lancio
 uno a prioritàmaggiore che chiede anch'esso la risorsa: se adesso faccio stampare
 la priorità corrente al processo a bassa priorità, questo dovrebbe aver ereditato
la priorità dell'altro.

Prova 8:

Proviamo a configuare la busy excecution come ci aveva suggerito Faldella:
il thread fa un ciclo infinito e ha asociato un hadler di cost overrun che provvede
a modificare una varibile endjob del thread. quando questa è settata a true il
thread finisce l'esecuzione.

Purtroppo la cosa non funziona: l'handler di cost overrun non viene mai chiamato.
I release parameters del thred riportano la soglia di costo indicata, ma sembra
che questa non venga sfruttata. Assegnando l'handler anche come gestore di deadline,
questo viene effettivamente chiamato quando sopraggiunge la deadline.

Prova9:

come la prova 8 vediamo se va la funzionalità di controllo di cost overrun,
stavolta con un processo periodico.

Neanche così funziona, sembra proprio che la funzionalità di monitoraggio costi
sia disattivata.

Prova 10:

Proviamo la funzionalità di busyWait: creo un processo periodico, con periodo di
1 secondo e con lavoro di mezzo secondo. Non mi resta che stampare quando
inizia e quando finisce il lavoro in modo da verificare se i tempi di esecuzione
sono rispettati.


Prova 11:

ho due thread: uno più prioritario che alla seconda esecuzione ha un tempo di
di esecuzione più lungo del normale, tale da far sforare la deadline al secondo.
non sono previsti handlers.

Il comportamento è strano: il secondo, una volta sforata la deadline, come
è logico subisce preemption dalla nuova release del thread più prioritario.
Conclude quindi il job nel periodo successivo una volta terminata l'esecuzione
del thread a prirità maggiore, a questa accoda immediatamente l'esecuzione del
job relativo a quel periodo. La cosa strana è che, terminata anche questa,
il thread meno prioritario esegue anche il job relativo al periodo successivo.
Che dovrebbe, invece essere schedulato solo all'inizio del prossimo periodo.

Facendo fare solo due cicli al thread1 (che quindi finisce dopo l'esecuzione lunga)
e ben 7 al thread due, si può notare come, dopo lo sforamento del secondo job
nel terzo periodo vengono eseguiti il secondo, il terzo ed il quarto job.
A questo punto, il thread si sospende ed inizia ad eseguire una iterazione
a ciclo, fino ad arrivare al numero di iterazioni specificate, peccato che
tutto finisca, ovviamente un ciclo prima del dovuto, visto che, nel ciclo
sucessivo allo sforamento della deadline, il job viene eseguito due volte.

Prova 12:

Lo scenario è analogo al precedente, la differenza è che al thread 2 è associato
un handler per la deadline missed che , dopo aver scritto nel log
provvede a chiamare l'operazione schedulePeriodic del thread2.

in presenza dell'handler tutto funziona bene, visto che nel ciclo successivo
viene terminato il job non concluso ed eseguito solo quello relativo al ciclo
attuale. Successivamente tutti gli altri job vengono schedulati correttamente.

Prova 13:

Due thread con lo stesso periodo. Quello a priorità maggiore fa un'esecuzione
 molto lunga,  più di due periodi. Lo scopo è controllare quanti deadline
missed vengono invocati e come vengono schedulati i job differiti del secondo
thread.

Il sistema si comporta come ci si aspettava:  relativamente
al secondo thread vengono lanciati due eventi
di deadline miss. Nel terzo periodo, una volta terminato il job del primo
thread, vengono eseguiti consecutivmente 3 job del secondo thread: i due dei
peridi precedenti e quello del terzo. Poi il sistema si sospende e il rilascio
dei job del secondo thread avviene correttamente all'inizio di ogni nuovo
periodo.

Prova 14:

Lo scenario è quello dell'esempio 13. Nell'handler provo a giocare con i metodi
che alterano il fireCount.

Mi sono sbagliato: il fire count è ralativo agli eventi accaduti, ma non ancora
notificati agli handlers. Nel nostro caso l'evento viene sempre raccolto.
Quello che sarebbe da modificare sarebbe un parametro alla pending releases,
del quale però non vi è traccia. Il comportamento as soon as possible, quindi
non è modificabile, al meno di non fare "i bambini coi baffi".

Prova 15:
Lo scopo dellaprova è verificare il funzionamento del priority inheritance
nell'acesso a blocchi innestati. In particolare il processo p3
accede a r2 , usata anche dal processo p2 e, all'interno dello sfruttamento
di r2 accede a r1 usata anche da p1. i vari thread vengono fatti partire in modo
che chiedano la risorsa quando p3 l'ha già occupata.

Il risultato è buono. la priorità di p3 sale a gradini, sia in salita, sia in
discesa( quando libera man mano le risorse).


Prova 16:
Proviamo la politica di skip: un badThread fa un'esecuzione che termina solo
nel terzo periodo, ad esso è associato un o SkipPolicyHandler.